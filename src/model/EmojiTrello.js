/**
 * Trello REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EmojiTrello model module.
 * @module model/EmojiTrello
 * @version 0.0.1
 */
class EmojiTrello {
    /**
     * Constructs a new <code>EmojiTrello</code>.
     * @alias module:model/EmojiTrello
     */
    constructor() { 
        
        EmojiTrello.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EmojiTrello</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmojiTrello} obj Optional instance to populate.
     * @return {module:model/EmojiTrello} The populated <code>EmojiTrello</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmojiTrello();

            if (data.hasOwnProperty('unified')) {
                obj['unified'] = ApiClient.convertToType(data['unified'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('native')) {
                obj['native'] = ApiClient.convertToType(data['native'], 'String');
            }
            if (data.hasOwnProperty('shortName')) {
                obj['shortName'] = ApiClient.convertToType(data['shortName'], 'String');
            }
            if (data.hasOwnProperty('shortNames')) {
                obj['shortNames'] = ApiClient.convertToType(data['shortNames'], ['String']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('texts')) {
                obj['texts'] = ApiClient.convertToType(data['texts'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('sheetX')) {
                obj['sheetX'] = ApiClient.convertToType(data['sheetX'], 'Number');
            }
            if (data.hasOwnProperty('sheetY')) {
                obj['sheetY'] = ApiClient.convertToType(data['sheetY'], 'Number');
            }
            if (data.hasOwnProperty('tts')) {
                obj['tts'] = ApiClient.convertToType(data['tts'], 'String');
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} unified
 */
EmojiTrello.prototype['unified'] = undefined;

/**
 * @member {String} name
 */
EmojiTrello.prototype['name'] = undefined;

/**
 * @member {String} native
 */
EmojiTrello.prototype['native'] = undefined;

/**
 * @member {String} shortName
 */
EmojiTrello.prototype['shortName'] = undefined;

/**
 * @member {Array.<String>} shortNames
 */
EmojiTrello.prototype['shortNames'] = undefined;

/**
 * @member {String} text
 */
EmojiTrello.prototype['text'] = undefined;

/**
 * @member {String} texts
 */
EmojiTrello.prototype['texts'] = undefined;

/**
 * @member {String} category
 */
EmojiTrello.prototype['category'] = undefined;

/**
 * @member {Number} sheetX
 */
EmojiTrello.prototype['sheetX'] = undefined;

/**
 * @member {Number} sheetY
 */
EmojiTrello.prototype['sheetY'] = undefined;

/**
 * @member {String} tts
 */
EmojiTrello.prototype['tts'] = undefined;

/**
 * @member {Array.<String>} keywords
 */
EmojiTrello.prototype['keywords'] = undefined;






export default EmojiTrello;


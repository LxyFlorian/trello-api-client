/**
 * Trello REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Color from './Color';

/**
 * The CardCover model module.
 * @module model/CardCover
 * @version 0.0.1
 */
class CardCover {
    /**
     * Constructs a new <code>CardCover</code>.
     * @alias module:model/CardCover
     */
    constructor() { 
        
        CardCover.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CardCover</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardCover} obj Optional instance to populate.
     * @return {module:model/CardCover} The populated <code>CardCover</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardCover();

            if (data.hasOwnProperty('idAttachment')) {
                obj['idAttachment'] = ApiClient.convertToType(data['idAttachment'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = Color.constructFromObject(data['color']);
            }
            if (data.hasOwnProperty('idUploadedBackground')) {
                obj['idUploadedBackground'] = ApiClient.convertToType(data['idUploadedBackground'], 'Boolean');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('brightness')) {
                obj['brightness'] = ApiClient.convertToType(data['brightness'], 'String');
            }
            if (data.hasOwnProperty('isTemplate')) {
                obj['isTemplate'] = ApiClient.convertToType(data['isTemplate'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {String} idAttachment
 */
CardCover.prototype['idAttachment'] = undefined;

/**
 * @member {module:model/Color} color
 */
CardCover.prototype['color'] = undefined;

/**
 * @member {Boolean} idUploadedBackground
 */
CardCover.prototype['idUploadedBackground'] = undefined;

/**
 * @member {module:model/CardCover.SizeEnum} size
 */
CardCover.prototype['size'] = undefined;

/**
 * @member {module:model/CardCover.BrightnessEnum} brightness
 */
CardCover.prototype['brightness'] = undefined;

/**
 * @member {Boolean} isTemplate
 */
CardCover.prototype['isTemplate'] = undefined;





/**
 * Allowed values for the <code>size</code> property.
 * @enum {String}
 * @readonly
 */
CardCover['SizeEnum'] = {

    /**
     * value: "normal"
     * @const
     */
    "normal": "normal"
};


/**
 * Allowed values for the <code>brightness</code> property.
 * @enum {String}
 * @readonly
 */
CardCover['BrightnessEnum'] = {

    /**
     * value: "light"
     * @const
     */
    "light": "light",

    /**
     * value: "dark"
     * @const
     */
    "dark": "dark"
};



export default CardCover;


/**
 * Trello REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CardBadgesAttachmentsByType from './CardBadgesAttachmentsByType';

/**
 * The CardBadges model module.
 * @module model/CardBadges
 * @version 0.0.1
 */
class CardBadges {
    /**
     * Constructs a new <code>CardBadges</code>.
     * @alias module:model/CardBadges
     */
    constructor() { 
        
        CardBadges.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CardBadges</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardBadges} obj Optional instance to populate.
     * @return {module:model/CardBadges} The populated <code>CardBadges</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardBadges();

            if (data.hasOwnProperty('attachmentsByType')) {
                obj['attachmentsByType'] = CardBadgesAttachmentsByType.constructFromObject(data['attachmentsByType']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'Boolean');
            }
            if (data.hasOwnProperty('votes')) {
                obj['votes'] = ApiClient.convertToType(data['votes'], 'Number');
            }
            if (data.hasOwnProperty('viewingMemberVoted')) {
                obj['viewingMemberVoted'] = ApiClient.convertToType(data['viewingMemberVoted'], 'Boolean');
            }
            if (data.hasOwnProperty('subscribed')) {
                obj['subscribed'] = ApiClient.convertToType(data['subscribed'], 'Boolean');
            }
            if (data.hasOwnProperty('fogbugz')) {
                obj['fogbugz'] = ApiClient.convertToType(data['fogbugz'], 'String');
            }
            if (data.hasOwnProperty('checkItems')) {
                obj['checkItems'] = ApiClient.convertToType(data['checkItems'], 'Number');
            }
            if (data.hasOwnProperty('checkItemsChecked')) {
                obj['checkItemsChecked'] = ApiClient.convertToType(data['checkItemsChecked'], 'Number');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'Number');
            }
            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'Boolean');
            }
            if (data.hasOwnProperty('due')) {
                obj['due'] = ApiClient.convertToType(data['due'], 'Date');
            }
            if (data.hasOwnProperty('dueComplete')) {
                obj['dueComplete'] = ApiClient.convertToType(data['dueComplete'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/CardBadgesAttachmentsByType} attachmentsByType
 */
CardBadges.prototype['attachmentsByType'] = undefined;

/**
 * @member {Boolean} location
 */
CardBadges.prototype['location'] = undefined;

/**
 * @member {Number} votes
 */
CardBadges.prototype['votes'] = undefined;

/**
 * @member {Boolean} viewingMemberVoted
 */
CardBadges.prototype['viewingMemberVoted'] = undefined;

/**
 * @member {Boolean} subscribed
 */
CardBadges.prototype['subscribed'] = undefined;

/**
 * @member {String} fogbugz
 */
CardBadges.prototype['fogbugz'] = undefined;

/**
 * @member {Number} checkItems
 */
CardBadges.prototype['checkItems'] = undefined;

/**
 * @member {Number} checkItemsChecked
 */
CardBadges.prototype['checkItemsChecked'] = undefined;

/**
 * @member {Number} comments
 */
CardBadges.prototype['comments'] = undefined;

/**
 * @member {Number} attachments
 */
CardBadges.prototype['attachments'] = undefined;

/**
 * @member {Boolean} description
 */
CardBadges.prototype['description'] = undefined;

/**
 * @member {Date} due
 */
CardBadges.prototype['due'] = undefined;

/**
 * @member {Boolean} dueComplete
 */
CardBadges.prototype['dueComplete'] = undefined;






export default CardBadges;

